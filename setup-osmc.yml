---
  - hosts: all
    roles:
    - cmprescott.xml
    remote_user: osmc

    vars:

      sshd_config: /etc/ssh/sshd_config
      kodi_base: /home/osmc/.kodi
      kodi_gui_settings: "{{ kodi_base }}/userdata/guisettings.xml"
      kodi_sources: "{{ kodi_base }}/userdata/sources.xml"
      kodi_wakeonlan: "{{ kodi_base }}/userdata/wakeonlan.xml"
      kodi_addon_data: "{{ kodi_base }}/userdata/addon_data"
      kodi_addon_database: "{{ kodi_base }}/userdata/Database/Addons20.db"
      kodi_viewmodes_database: "{{ kodi_base }}/userdata/Database/ViewModes6.db"
      sqlite3: /usr/osmc/bin/sqlite3

    pre_tasks:

    - name: stop kodi
      become: yes
      service: name=mediacenter state=stopped
      changed_when: False
    - name: install dependencies for role xml
      become: yes
      apt: name=python-lxml state=latest update_cache=yes
      environment:
        PATH: /bin:/sbin:/usr/bin:/usr/sbin

    tasks:

    # configure sshd

    - name: Place my public ssh key
      authorized_key: user="{{ ansible_user }}" key="{{ lookup('file', './files/authorized_keys.myuser.pub') }}"
    - name: Disable password login
      become: yes
      replace: dest={{ sshd_config }} regexp="#PasswordAuthentication yes" replace="PasswordAuthentication no"
      notify:
        - restart sshd

    # configure kodi - general settings and localization

    - name: set country
      xml: file={{ kodi_gui_settings }} xpath=/settings/locale/country value="Deutschland"
    - name: set keyboardlayouts
      xml: file={{ kodi_gui_settings }} xpath=/settings/locale/keyboardlayouts value="German QWERTZ"
    - name: set language
      xml: file={{ kodi_gui_settings }} xpath=/settings/locale/language value="resource.language.de_de"
    - name: set timezone
      xml: file={{ kodi_gui_settings }} xpath=/settings/locale/timezone value="Europe/Berlin"
    - name: set timezonecountry
      xml: file={{ kodi_gui_settings }} xpath=/settings/locale/timezonecountry value="Germany"
    - name: switch gui to expert mode
      xml: file={{ kodi_gui_settings }} xpath=/settings/general/settinglevel value=3
    - name: use confluence skin
      xml: file={{ kodi_gui_settings }} xpath=/settings/lookandfeel/skin value=skin.confluence
    - name: disable GUI sounds
      xml: file={{ kodi_gui_settings }} xpath=/settings/lookandfeel/soundskin value=""
    - name: remove default attribute from locale settings
      xml: file={{ kodi_gui_settings }} xpath=/settings/locale/*/@default ensure=absent
      changed_when: False
    - name: remove default attribute from general settigs
      xml: file={{ kodi_gui_settings }} xpath=/settings/general/*/@default ensure=absent
      changed_when: False
    - name: remove default attribute from lookandfeel settigs
      xml: file={{ kodi_gui_settings }} xpath=/settings/lookandfeel/*/@default ensure=absent
      changed_when: False

    # configure kodi - powermanagement

    - name: shutdown after 30 minutes
      xml: file={{ kodi_gui_settings }} xpath=/settings/powermanagement/shutdowntime value=30
    - name: activate wake on lan
      xml: file={{ kodi_gui_settings }} xpath=/settings/powermanagement/wakeonaccess value="true"
    - name: remove default attribute from powermanagement settigs
      xml: file={{ kodi_gui_settings }} xpath=/settings/powermanagement/*/@default ensure=absent
      changed_when: False
    - name: write wol configuration
      template: src=./files/wakeonlan.xml.j2 dest={{ kodi_wakeonlan }}

    # configure kodi - enable TV using vdr backend

    - name: make sure pvr.vdr.vnsi plugin directory exists
      file: path={{ kodi_addon_data }}/pvr.vdr.vnsi state=directory
    - name: configure pvr.vdr.vnsi plugin
      template: src=./files/pvr.vdr.vnsi.settings.xml.j2 dest={{ kodi_addon_data }}/pvr.vdr.vnsi/settings.xml
    - name: test if plugin is installed
      shell: echo 'SELECT count(*) FROM disabled WHERE addonID="pvr.vdr.vnsi";' | {{ sqlite3 }} .kodi/userdata/Database/Addons20.db
      register: vnsi_installed
      changed_when: vnsi_installed.stdout == '1'
    - name: activate plugin in addon database
      shell: echo 'DELETE FROM disabled WHERE addonID="pvr.vdr.vnsi";' | {{ sqlite3 }} {{ kodi_addon_database }}
      when: vnsi_installed.stdout == '1'
    - name: enable kodi pvr module
      xml: file={{ kodi_gui_settings }} xpath=/settings/pvrmanager/enabled value=true
    - name: remove default attribute from pvrmanager settings
      xml: file={{ kodi_gui_settings }} xpath=/settings/pvrmanager/*/@default ensure=absent
      changed_when: False

    # configure kodi - enable music, video and picture source

    - name: copy sources.xml
      template: src=./files/sources.xml.j2 dest={{ kodi_sources }}
    - name: test if view mode for pictures is set
      shell: echo 'SELECT count(*) FROM view WHERE window=10002;' | {{ sqlite3 }} {{ kodi_viewmodes_database }}
      register: pictures_viewmode
      changed_when: pictures_viewmode.stdout == '0'
    - name: set view mode for pictures to thumbnail
      shell: echo 'INSERT INTO view (window, path, viewMode, sortMethod, sortOrder, sortAttributes, skin) VALUES (10002,"/",66036,1,1,0,"skin.confluence");' | {{ sqlite3 }} {{ kodi_viewmodes_database }}
      when: pictures_viewmode.stdout == '0'
    - name: set view mode for remote pictures to thumbnail
      shell: echo 'INSERT INTO view (window, path, viewMode, sortMethod, sortOrder, sortAttributes, skin) VALUES (10002,"nfs://192.168.0.100/srv/picture/",66036,1,1,0,"skin.confluence");' | {{ sqlite3 }} {{ kodi_viewmodes_database }}
      when: pictures_viewmode.stdout == '0'

    handlers:

    - name: restart sshd
      become: yes
      service: name=sshd state=restarted

    post_tasks:

    - name: start kodi
      become: yes
      service: name=mediacenter state=started
      changed_when: False
