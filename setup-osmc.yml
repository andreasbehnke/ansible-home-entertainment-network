---
  - hosts: all
    roles:
    - cmprescott.xml

    vars:

      sshd_config: /etc/ssh/sshd_config
      kodi_base: /home/{{ ansible_user }}/.kodi
      kodi_gui_settings: "{{ kodi_base }}/userdata/guisettings.xml"
      kodi_sources: "{{ kodi_base }}/userdata/sources.xml"
      kodi_wakeonlan: "{{ kodi_base }}/userdata/wakeonlan.xml"
      kodi_addon_data: "{{ kodi_base }}/userdata/addon_data"
      kodi_addon_database: "{{ kodi_base }}/userdata/Database/Addons{{ kodi_addon_database_version }}.db"
      kodi_viewmodes_database: "{{ kodi_base }}/userdata/Database/ViewModes{{ kodi_viewmodes_database_version }}.db"

    environment:

      PATH: '/bin:/sbin:/usr/bin:/usr/sbin:/usr/osmc/bin/'

    pre_tasks:

    - name: stop kodi
      become: yes
      service: name={{ kodi_service }} state=stopped
      changed_when: False
      when: kodi_service is defined
    - name: install dependencies for role xml
      become: yes
      apt: name=python-lxml state=latest #  update_cache=yes

    tasks:

    # configure sshd

    - name: test if service sshd exists
      stat: path=/etc/init.d/ssh
      register: ssh_installed
    - name: Place my public ssh key
      authorized_key: user="{{ ansible_user }}" key="{{ lookup('file', './files/authorized_keys.myuser.pub') }}"
      when: ssh_installed.stat.exists
    - name: Disable password login
      become: yes
      replace: dest={{ sshd_config }} regexp="#PasswordAuthentication yes" replace="PasswordAuthentication no"
      when: ssh_installed.stat.exists
      notify:
        - restart sshd

    # configure kodi - guisettings.xml

    - name: apply all gui settings
      xml: file={{ kodi_gui_settings }} xpath={{ item.xpath }} value={{ item.value }}
      with_items: "{{ kodi_gui_settings_values }}"
    - name: remove default attribute
      xml: file={{ kodi_gui_settings }} xpath={{ item }} ensure=absent
      changed_when: False
      with_items: "{{ kodi_gui_settings_remove_default }}"

    # configure kodi - wol

    - name: write wol configuration
      template: src=./files/wakeonlan.xml.j2 dest={{ kodi_wakeonlan }}

    # configure kodi - enable TV using vdr backend

    - name: make sure pvr.vdr.vnsi plugin directory exists
      file: path={{ kodi_addon_data }}/pvr.vdr.vnsi state=directory
    - name: configure pvr.vdr.vnsi plugin
      template: src=./files/pvr.vdr.vnsi.settings.xml.j2 dest={{ kodi_addon_data }}/pvr.vdr.vnsi/settings.xml
    - name: test if plugin is installed
      shell: echo 'SELECT count(*) FROM disabled WHERE addonID="pvr.vdr.vnsi";' | sqlite3 {{ kodi_addon_database }}
      register: vnsi_installed
      changed_when: vnsi_installed.stdout == '1'
    - name: activate plugin in addon database
      shell: echo 'DELETE FROM disabled WHERE addonID="pvr.vdr.vnsi";' | sqlite3 {{ kodi_addon_database }}
      when: vnsi_installed.stdout == '1'

    # configure kodi - enable music, video and picture source

    - name: copy sources.xml
      template: src=./files/sources.xml.j2 dest={{ kodi_sources }}
    - name: test if view mode for pictures is set
      shell: echo 'SELECT count(*) FROM view WHERE window=10002;' | sqlite3 {{ kodi_viewmodes_database }}
      register: pictures_viewmode
      changed_when: pictures_viewmode.stdout == '0'
    - name: set view mode for pictures to thumbnail
      shell: echo 'INSERT INTO view (window, path, viewMode, sortMethod, sortOrder, sortAttributes, skin) VALUES (10002,"/",66036,1,1,0,"skin.confluence");' | sqlite3 {{ kodi_viewmodes_database }}
      when: pictures_viewmode.stdout == '0'
    - name: set view mode for remote pictures to thumbnail
      shell: echo 'INSERT INTO view (window, path, viewMode, sortMethod, sortOrder, sortAttributes, skin) VALUES (10002,"nfs://{{ homeserver_host }}/srv/picture/",66036,1,1,0,"skin.confluence");' | sqlite3 {{ kodi_viewmodes_database }}
      when: pictures_viewmode.stdout == '0'

    handlers:

    - name: restart sshd
      become: yes
      service: name=sshd state=restarted

    post_tasks:

    - name: start kodi
      become: yes
      service: name={{ kodi_service }} state=started
      changed_when: False
      when: kodi_service is defined
