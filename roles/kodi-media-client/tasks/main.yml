---

  # install kodi and plugins (for ubuntu only)

  - name: install kodi
    become: yes
    apt: name={{ item }} state=latest
    with_items:
      - kodi
      - kodi-pvr-vdr-vnsi
    when: "ansible_distribution == 'Ubuntu'"
  - name: test if kodi base dir exists
    stat: path={{ kodi_base }}
    register: kodi_base_dir
    when: "ansible_distribution == 'Ubuntu'"
  - name: start kodi for the first time to create configuration folder
    shell: kodi
    async: 1
    poll: 0
    when: "ansible_distribution == 'Ubuntu' and kodi_base_dir.stat.exists == False"

  # configure kodi - guisettings.xml

  - name: wait for file being created
    wait_for: path={{ kodi_gui_settings }}
    changed_when: False
  - name: apply all gui settings
    xml: file={{ kodi_gui_settings }} xpath={{ item.xpath }} value={{ item.value }}
    with_items: "{{ kodi_gui_settings_values }}"
  - name: remove default attribute
    xml: file={{ kodi_gui_settings }} xpath={{ item }} ensure=absent
    changed_when: False
    with_items: "{{ kodi_gui_settings_remove_default }}"

  # configure kodi - wol

  - name: write wol configuration
    template: src=wakeonlan.xml.j2 dest={{ kodi_wakeonlan }}

  # configure kodi - enable TV using vdr backend

  - name: make sure pvr.vdr.vnsi plugin directory exists
    file: path={{ kodi_addon_data }}/pvr.vdr.vnsi state=directory
  - name: configure pvr.vdr.vnsi plugin
    template: src=pvr.vdr.vnsi.settings.xml.j2 dest={{ kodi_addon_data }}/pvr.vdr.vnsi/settings.xml
  - name: find addon database file
    find: path={{ kodi_database }} patterns=Addons*.db
    register: kodi_addon_database
    changed_when: False
  - name: test if plugin is installed
    shell: echo 'SELECT count(*) FROM installed WHERE addonID="pvr.vdr.vnsi" and enabled=0;' | sqlite3 {{ kodi_addon_database.files[0].path }}
    register: vnsi_installed
    changed_when: vnsi_installed.stdout == '1'
  - name: activate plugin in addon database
    shell: echo 'UPDATE installed SET enabled=1 WHERE addonID="pvr.vdr.vnsi";' | sqlite3 {{ kodi_addon_database.files[0].path }}
    when: vnsi_installed.stdout == '1'
  - name: copy channel logos
    unarchive: src=channel_logos.tar.gz dest={{ ansible_env.HOME }}

  # configure kodi - enable music, video and picture source

  - name: copy sources.xml
    template: src=sources.xml.j2 dest={{ kodi_sources }}
  - name: find view mode database file
    find: path={{ kodi_database }} patterns=ViewModes*.db
    register: kodi_viewmodes_database
    changed_when: False
  - name: test if view mode for pictures is set
    shell: echo 'SELECT count(*) FROM view WHERE window=10002;' | sqlite3 {{ kodi_viewmodes_database.files[0].path }}
    register: pictures_viewmode
    changed_when: pictures_viewmode.stdout == '0'
  - name: set view mode for pictures to thumbnail
    shell: echo 'INSERT INTO view (window, path, viewMode, sortMethod, sortOrder, sortAttributes, skin) VALUES (10002,"/",66036,1,1,0,"skin.confluence");' | sqlite3 {{ kodi_viewmodes_database.files[0].path }}
    when: pictures_viewmode.stdout == '0'
  - name: set view mode for remote pictures to thumbnail
    shell: echo 'INSERT INTO view (window, path, viewMode, sortMethod, sortOrder, sortAttributes, skin) VALUES (10002,"nfs://{{ homeserver_host }}/srv/picture/",66036,1,1,0,"skin.confluence");' | sqlite3 {{ kodi_viewmodes_database.files[0].path }}
    when: pictures_viewmode.stdout == '0'
